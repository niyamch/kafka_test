version: '3.9'

networks:
  app-tier:
    driver: bridge

services:
  postgres:
    image: postgres:15.3
    container_name: postgres
    ports:
      - '5433:$POSTGRES_PORT'
    env_file:
      - .env
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres']
      interval: 10s
      timeout: 3s
      retries: 10
    networks:
      - app-tier
    volumes:
      - postgres-data:/var/lib/postgresql/data

  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: app
    depends_on:
      - kafka
      - postgres
    ports:
      - '$APP_PORT:$APP_PORT'
      - '9229:9229' # debug port
    healthcheck:
      test: ['CMD', 'curl', 'http://localhost:$APP_PORT/']
      interval: 2s
      timeout: 2s
      retries: 5
    restart: always
    env_file:
      - .env
    volumes:
      - ./src:/app/src
      - /app/node_modules
    networks:
      - app-tier

  kafka:
    image: docker.io/bitnami/kafka:3.5
    container_name: kafka
    restart: always
    ports:
      - 9092:9092
    networks:
      - app-tier
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=true
      - KAFKA_ENABLE_KRAFT=true
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
    volumes:
      - kafka:/bitnami/kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - '8080:8080'
    environment:
      - DYNAMIC_CONFIG_ENABLED=true
      - SPRING_CONFIG_ADDITIONAL-LOCATION=/config.yml
    networks:
      - app-tier
    volumes:
      - ./kafka-ui-config.yml:/config.yml

volumes:
  postgres-data:
  kafka:
